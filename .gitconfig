# This is Git's per-user configuration file.
[user]
	name = Aneesh Bhatnagar
	email = AneeshBhatnagar@users.noreply.github.com
	signingkey = ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDrlmyZ2KIsLz9aZo7gbnu78/J/fSFRfqlULXPC/JdjJB0xMZw0snu5pHYprnQw/vz4P8H+qexSltHXbKPuiHFutRQ+s3PVQYV94T2EuKF9Nx4b/9ZAaRN2pLruaH4mBl0zldALKZpeTde1zuMJsIUGkkEubFYDAjDQ28yswCmGc4bbCpee+EKcTD6ljGLk+yErZJNn2PKdFHCyDJDOmHvsskR1JMmByA+9LDKFoABKnXk2Lk3dK15AS5EwjUmJN+cgUXyUjhoE0/mnN2VC+xa9RQKvSqqXfOT0lZhUQ2jVvtd4ivV+l2piu5raitr4uGsbOhd+DGvkm7N9oC1dDpLXYUQFgeQKFXFPzVQkbxYc4hEOpAR40JaEgk1uRa9fav3aG3tR7J7/NZwtrF0RN6rufFfbUgpuieXgEU4QyeFEowJJx/V4R7rXNsEVzEV3ZTj8JcN2FcGDbJNTHJC2G3lMWtTfaccLKc1C4LbhFKOYYZ4t8gNIbXBm2e6nf3Hpy61HzEoDTUaWWdgxgfSzlMuU5orIdyRbweeWd8gL4QNMcpsDdcOS04GYYuLNYSxMeh8XsJDoqA6MDauUux+ygaGoXS95PQWc5TqIwCorL00a3bwzZ0PK3MW4FJQWTXaVOlgtebmq+DfhH0XHjm143x2OTvjr/zeH4u7dUSwQ1jV2hQ==
[url "git@github.com:"]
	insteadOf = https://github.com/
[alias]
	# squash the previous n commits
	squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
	# list all aliases
	la = "!git config -l | grep alias | cut -c 7-"
	# Nice, colorful graph visualization
	lg = log --decorate --oneline --graph --branches --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold blue)(%ar) %C(bold yellow)%d%C(reset) %C(green)%s%C(reset) %C(dim green)- %an%C(reset)'
	logdog = log --decorate --oneline --graph

	# Semantic Commit messages
	feat = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"feat: ‚ú® $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"feat($1): ‚ú® $2\"; fi }; f"
	fix = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"fix: üêõ $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"fix($1): üêõ $2\"; fi }; f"
	style = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"style: üé® $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"style($1): üé® $2\"; fi }; f"
	cleanup = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"cleanup: üóëÔ∏è $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"cleanup($1): üóëÔ∏è $2\"; fi }; f"
	refactor = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"refactor: ‚ôªÔ∏è $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"refactor($1): ‚ôªÔ∏è $2\"; fi }; f"
	perf = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"perf: ‚ö°Ô∏è $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"perf($1): ‚ö°Ô∏è $2\"; fi }; f"
	test = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"test: ‚úÖ $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"test($1): ‚úÖ $2\"; fi }; f"
	chore = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"chore: üîß $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"chore($1): üîß $2\"; fi }; f"
	tracking = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"tracking: üìà $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"tracking($1): üìà $2\"; fi }; f"
	docs = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"docs: üìù $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"docs($1): üìù $2\"; fi }; f"
	config = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"chore(config): üîß $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"chore($1): üîß $2\"; fi }; f"
	ci = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"chore(ci): üë∑ $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"chore($1): üë∑ $2\"; fi }; f"
	release = "!f() { if [[ ! -z $1 ]] && [[ -z $2 ]]; then git commit -m \"release: üöÄ $1\"; elif [[ ! -z $1 ]] && [[ ! -z $2 ]]; then git commit -m \"release($1): üöÄ $2\"; fi }; f"

[init]
	defaultBranch = main
[gpg]
	format = ssh
[gpg "ssh"]
	program = /Applications/1Password.app/Contents/MacOS/op-ssh-sign
[commit]
	gpgsign = true
